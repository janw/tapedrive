# Generated by Django 2.2.4 on 2019-08-25 12:46

import django.contrib.auth.models
import django.contrib.auth.validators
from django.db import migrations, models
import django.utils.timezone
import podcasts.models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0011_update_proxy_permissions'),
    ]

    operations = [
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=30, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('sort_order_podcasts', models.CharField(choices=[('Content', (('title', 'Title'),)), ('Metadata', (('last_episode_date', 'Last Published Episode'), ('num_episodes', 'Number of Episodes')))], default='title', help_text='Determines the sorting of podcasts in the podcasts list', max_length=16, verbose_name='Sort Podcasts By')),
                ('sort_order_episodes', models.CharField(choices=[('Content', (('title', 'Title'),)), ('Metadata', (('downloaded', 'Download Date (Earliest First)'), ('-downloaded', 'Download Date (Latest First)'), ('published', 'Publishing Date (Earliest First)'), ('-published', 'Publishing Date (Latest First)'), ('itunes_duration', 'Duration (Shortest First)'), ('-itunes_duration', 'Duration (Longest First)')))], default='-published', help_text='Determines the sorting of episodes on podcast detail pages', max_length=16, verbose_name='Sort Episodes By')),
                ('dark_mode', models.BooleanField(default=False, help_text='Reduce eye strain at night, increase awesomeness by day.', verbose_name='Dark Mode')),
                ('image_security_policy', models.CharField(choices=[('a', 'Allow All'), ('f', 'Allow First-Party'), ('n', 'Allow None')], default='f', help_text='How to load external images in show notes, etc.', max_length=1, verbose_name='Image Security Policy')),
                ('playback_seek_forward_by', podcasts.models.IntegerRangeField(blank=True, default=45, null=True, verbose_name='Seek Duration Forward')),
                ('playback_seek_backward_by', podcasts.models.IntegerRangeField(blank=True, default=30, null=True, verbose_name='Seek Duration Backward')),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.Group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.Permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
    ]
